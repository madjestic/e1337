{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE CPP #-}
{-# LANGUAGE DeriveGeneric #-}

module Rendering
  ( openWindow
  , closeWindow
  , draw
  , initVAO
  , initUniforms
  , initGlobalUniforms
  , render
  , Backend (..)
  , BackendOptions (..)
  ) where

import Control.Monad
import Control.Monad.IO.Class
import Data.Text                              (Text)
import Data.Maybe
import Foreign.C
import Foreign.Marshal.Array                  (withArray)
import Foreign.Ptr                            (plusPtr, nullPtr)
import Foreign.Storable                       (sizeOf)
import Graphics.Rendering.OpenGL as GL hiding (color, normal, Size, Black, Red, Green)
import SDL                             hiding (Point, Event, Timer, (^+^), (*^), (^-^), dot, project)
import qualified SDL.Font
import qualified SDL.Vect as Vect
-- import SDL.Image (loadTexture)
import Graphics.GLUtil                        (readTexture, texture2DWrap, loadTexture)
import Graphics.GLUtil.JuicyTextures (readTexInfo)

import LoadShaders
import Game
import Object
import Camera    as C
import Controllable
import Descriptor
import Material
import Mouse
--- debug stuff
import Project (Project, path, models)
import PGeo hiding (materials)
import VGeo
---

import Data.Foldable     as DF (toList)
import Linear.Projection as LP (perspective)

import Unsafe.Coerce
import Data.IORef
import Data.Word
import GHC.Generics (Generic)

import Control.Lens       hiding (transform, indexed)
import Debug.Trace as DT

#ifdef DEBUG
debug = True
#else
debug = False
#endif

data Backend
  = OpenGL
  | Vulkan

data BackendOptions
  =  BackendOptions
     {
       primitiveMode :: PrimitiveMode
     } deriving Show

openWindow :: Text -> (CInt, CInt) -> IO (SDL.Window, SDL.Renderer)
openWindow title (sizex,sizey) =
  do
    SDL.initialize [SDL.InitVideo]
    SDL.HintRenderScaleQuality $= SDL.ScaleLinear                    
    do renderQuality <- SDL.get SDL.HintRenderScaleQuality          
       when (renderQuality /= SDL.ScaleLinear) $                    
         putStrLn "Warning: Linear texture filtering not enabled!"
         
    let config =
          OpenGLConfig
          { glColorPrecision = V4 8 8 8 0
          , glDepthPrecision = 24
          , glStencilPrecision = 8
          , glMultisampleSamples = 8
          , glProfile = Core Normal 2 1
          }
        sbenchmark     = True
        rendererConfig =
          SDL.RendererConfig
          { rendererType = if sbenchmark
                           then SDL.AcceleratedRenderer
                           else SDL.AcceleratedVSyncRenderer
          , rendererTargetTexture = True
          }
                 

    depthFunc $= Just Less

    -- window <- SDL.createWindow
    --           title
    --           SDL.defaultWindow { SDL.windowInitialSize = V2 sizex sizey
    --                             , SDL.windowGraphicsContext = OpenGLContext config
    --                             }
    -- srenderer <- SDL.createRenderer window (-1) rendererConfig
    window   <- createWindow "My SDL Application" defaultWindow
    srenderer <- createRenderer window (-1) defaultRenderer

    SDL.showWindow window
    _ <- SDL.glCreateContext window
    
    return (window, srenderer)

closeWindow :: SDL.Window -> IO ()
closeWindow window =
  do
    SDL.destroyWindow window
    SDL.quit

-- -- < OpenGL > -------------------------------------------------------------

data Uniforms
  =  Uniforms
     {
       u_mats  :: Material 
     , u_prog  :: Program
     , u_mouse :: (Double, Double)
     , u_time  :: Float
     , u_res   :: (CInt, CInt)
     --, u_proj  :: M44 Double --GLmatrix GLfloat
     , u_cam   :: M44 Double 
     , u_xform :: M44 Double 
     } deriving Show

data Drawable
  =  Drawable
     { uniforms   :: Uniforms
     , descriptor :: Descriptor
     , program    :: Program
     } deriving Show

(<$.>) :: (a -> b) -> [a] -> [b]
(<$.>) = map

(<*.>) :: [a -> b] -> [a] -> [b]
(<*.>) = zipWith ($)

fromGame :: Game -> Float -> [Drawable]
fromGame game time = drs
  where
    objs = (view objects game) :: [Object]
    mpos = unsafeCoerce $ view (camera . controller . device . mouse . pos) game :: (Double, Double)
    resX = fromEnum $ view (options . resx) game :: Int
    resY = fromEnum $ view (options . resy) game :: Int
    res  = ((toEnum resX), (toEnum resY)) :: (CInt, CInt)
    cam  = view (camera . controller . Controllable.transform) game :: M44 Double
    drs  = concat $ fmap (fromObject mpos time res cam) objs :: [Drawable]

fromObject :: (Double, Double) -> Float -> (CInt, CInt) -> M44 Double -> Object -> [Drawable]
--fromObject mpos time res cam obj = (DT.trace ("drs :" ++ show drs) $  drs)
fromObject mpos time res cam obj = drs
  where
    drs      = --undefined :: [Drawable]
      (\u_mats' u_prog' u_mouse' u_time' u_res' u_cam' u_xform' ds' ps'
        -> (Drawable (Uniforms u_mats' u_prog' u_mouse' u_time' u_res' u_cam' u_xform') ds' ps'))
      <$.> mats <*.> progs <*.> mpos_ <*.> time_ <*.> res_ <*.> cam_ <*.> xforms <*.> ds <*.> progs
      -- DEBUG code, see what gets rendered
      -- <$.> (DT.trace ("mats  :" ++ show mats)   $ mats  )
      -- <*.> (DT.trace ("progs :" ++ show progs ) $ progs ) 
      -- <*.> (DT.trace ("mpos_ :" ++ show mpos_ ) $ mpos_ ) 
      -- <*.> (DT.trace ("time_ :" ++ show time_ ) $ time_ ) 
      -- <*.> (DT.trace ("res_  :" ++ show res_  ) $ res_  ) 
      -- <*.> (DT.trace ("cam_  :" ++ show cam_  ) $ cam_  ) 
      -- <*.> (DT.trace ("xforms:" ++ show xforms) $ xforms) 
      -- <*.> (DT.trace ("ds    :" ++ show ds    ) $ ds    ) 
      -- <*.> (DT.trace ("progs :" ++ show progs ) $ progs ) 

    n      = length $ view descriptors obj:: Int
    mpos_  = replicate n $ mpos :: [(Double, Double)]
    time_  = replicate n $ time :: [Float]
    res_   = replicate n $ res  :: [(CInt, CInt)]
    cam_   = replicate n $ cam  :: [M44 Double]

    mats   = view Object.materials   obj :: [Material]
    progs  = view Object.programs    obj :: [Program]
    xforms = concat $ replicate n $ view Object.transform   obj :: [M44 Double]
    ds     = view Object.descriptors obj :: [Descriptor]

red :: SDL.Font.Color
red = SDL.V4 255 0 0 0

-- | Colours supported by the major frontends.
data Color =
    Black
  | Red
  | Green
  | Brown
  | Blue
  | Magenta
  | Cyan
  | White
  | AltWhite  -- only use for frontend hacks
  | BrBlack
  | BrRed
  | BrGreen
  | BrYellow
  | BrBlue
  | BrMagenta
  | BrCyan
  | BrWhite
  deriving (Show, Read, Eq, Ord, Enum, Generic)

colorToRGBA :: Rendering.Color -> SDL.V4 Word8
colorToRGBA Black     = SDL.V4 0    0    0    sDL_ALPHA_OPAQUE
colorToRGBA Red       = SDL.V4 0xD5 0x05 0x05 sDL_ALPHA_OPAQUE
colorToRGBA Green     = SDL.V4 0x05 0x9D 0x05 sDL_ALPHA_OPAQUE
-- colorToRGBA Brown     = SDL.V4 0xCA 0x4A 0x05 sDL_ALPHA_OPAQUE
-- colorToRGBA Blue      = SDL.V4 0x05 0x56 0xF4 sDL_ALPHA_OPAQUE
-- colorToRGBA Magenta   = SDL.V4 0xAF 0x0E 0xAF sDL_ALPHA_OPAQUE
-- colorToRGBA Cyan      = SDL.V4 0x05 0x96 0x96 sDL_ALPHA_OPAQUE
colorToRGBA White     = SDL.V4 0xB8 0xBF 0xCB sDL_ALPHA_OPAQUE
-- colorToRGBA AltWhite  = SDL.V4 0xC4 0xBE 0xB1 sDL_ALPHA_OPAQUE
-- colorToRGBA BrBlack   = SDL.V4 0x6F 0x5F 0x5F sDL_ALPHA_OPAQUE
-- colorToRGBA BrRed     = SDL.V4 0xFF 0x55 0x55 sDL_ALPHA_OPAQUE
-- colorToRGBA BrGreen   = SDL.V4 0x65 0xF1 0x36 sDL_ALPHA_OPAQUE
-- colorToRGBA BrYellow  = SDL.V4 0xEB 0xD6 0x42 sDL_ALPHA_OPAQUE
-- colorToRGBA BrBlue    = SDL.V4 0x4D 0x98 0xF4 sDL_ALPHA_OPAQUE
-- colorToRGBA BrMagenta = SDL.V4 0xFF 0x77 0xFF sDL_ALPHA_OPAQUE
-- colorToRGBA BrCyan    = SDL.V4 0x52 0xF4 0xE5 sDL_ALPHA_OPAQUE
-- colorToRGBA BrWhite   = SDL.V4 0xFF 0xFF 0xFF sDL_ALPHA_OPAQUE
  
sDL_ALPHA_OPAQUE :: Word8
sDL_ALPHA_OPAQUE = 255

render :: Backend -> BackendOptions -> (SDL.Window, SDL.Renderer, SDL.Font.Font) -> Game -> IO ()
render Rendering.OpenGL opts (window, srenderer, font) game =
  do
    GL.clearColor $= Color4 0.0 0.0 0.5 1.0
    GL.clear [ColorBuffer, DepthBuffer]
    
    ticks           <- SDL.ticks
    let currentTime = fromInteger (unsafeCoerce ticks :: Integer) :: Float
        drs         = fromGame game currentTime :: [Drawable]
        
    renderFont (window, srenderer, font)
    -- tx <- initTexture (window, srenderer, font)
    -- mapM_ (draw opts window tx) drs
    -- mapM_ (draw opts window) drs
    SDL.glSwapWindow window
    
render Vulkan _ _ _ = undefined

initTexture :: (SDL.Window, SDL.Renderer, SDL.Font.Font) -> IO Texture
initTexture (window, srenderer, font) =
  do
    textSurfaceRaw <- SDL.Font.blended font (colorToRGBA Black) "Hello, World!"
    textSurface <- SDL.createRGBSurface (Vect.V2 800 600) SDL.ARGB8888
    SDL.surfaceFillRect textSurface Nothing (colorToRGBA Red)
    void $ SDL.surfaceBlit textSurfaceRaw Nothing textSurface Nothing
    SDL.freeSurface textSurfaceRaw
    textTexture <- SDL.createTextureFromSurface srenderer textSurface
    -- SDL.copy srenderer textTexture Nothing Nothing
    -- SDL.destroyTexture textTexture
    -- SDL.freeSurface textSurface
    return textTexture

renderFont :: (SDL.Window, SDL.Renderer, SDL.Font.Font) -> IO ()
renderFont (window, srenderer, font) =
  do
    -- let w = 100.0 :: Float
    --     h = 100.0 :: Float
    -- GL.loadIdentity
    -- GL.translate $ Vector3 (w) (h) 0.0

    textSurfaceRaw <- SDL.Font.blended font (colorToRGBA Black) "Hello, World!"
    textSurface <- SDL.createRGBSurface (Vect.V2 800 600) SDL.ARGB8888
    SDL.surfaceFillRect textSurface Nothing (colorToRGBA Red)
    void $ SDL.surfaceBlit textSurfaceRaw Nothing textSurface Nothing
    SDL.freeSurface textSurfaceRaw
    textTexture <- SDL.createTextureFromSurface srenderer textSurface
    SDL.copy srenderer textTexture Nothing Nothing
    SDL.destroyTexture textTexture
    SDL.freeSurface textSurface
    return ()

--draw :: BackendOptions -> SDL.Window -> Texture -> Drawable -> IO ()
draw :: BackendOptions -> SDL.Window -> Drawable -> IO ()
draw
  opts
  window
--  tx
  (Drawable
    unis
    (Descriptor vao' numIndices')
    prog) =
  do
    initUniforms unis --tx
    
    bindVertexArrayObject $= Just vao'
    --drawElements Triangles numIndices' GL.UnsignedInt nullPtr
    drawElements (primitiveMode opts) numIndices' GL.UnsignedInt nullPtr
    
    GL.pointSize $= 10

    cullFace  $= Just Back
    depthFunc $= Just Less

initGlobalUniforms :: IO ()
initGlobalUniforms =
  do
    print "Loading Textures..."
    -- | Assign Textures
    activeTexture            $= TextureUnit 0
    texture Texture2D        $= Enabled
    tx0 <- loadTex "textures/1024_earth_daymap.jpg"
    textureBinding Texture2D $= Just tx0

    activeTexture            $= TextureUnit 1
    texture Texture2D        $= Enabled
    tx1 <- loadTex "textures/256_moon.jpg"
    textureBinding Texture2D $= Just tx1
    print "Finished loading textures."

-- initUniforms :: Uniforms -> Texture -> IO ()
initUniforms :: Uniforms -> IO ()
initUniforms (Uniforms u_mat' u_prog' u_mouse' u_time' u_res' u_cam' u_xform') = 
  do
    -- | Shaders
    -- _ <- DT.trace ("vertShader: " ++ show (_vertShader u_mat')) $ return ()
    -- _ <- DT.trace ("vertShader: " ++ show (_fragShader u_mat')) $ return ()

    programDebug <- loadShaders
               [ ShaderInfo VertexShader   (FileSource (_vertShader u_mat' ))
               , ShaderInfo FragmentShader (FileSource (_fragShader u_mat' )) ]
    let program = case debug of
                    True  -> programDebug
                    False -> u_prog'
    currentProgram $= Just program

    -- | Set Uniforms
    let u_mouse       = Vector2 (realToFrac $ fst u_mouse') (realToFrac $ snd u_mouse') :: Vector2 GLfloat
    location0         <- get (uniformLocation program "u_mouse'")
    uniform location0 $= u_mouse

    let resX          = fromIntegral $ fromEnum $ fst u_res' :: Float
        resY          = fromIntegral $ fromEnum $ snd u_res' :: Float
        u_res         = Vector2 resX resY :: Vector2 GLfloat
    location1         <- get (uniformLocation program "u_resolution")
    uniform location1 $= u_res

    location2         <- get (uniformLocation program "u_time'")
    uniform location2 $= (u_time' :: GLfloat)

    let proj =          
          fmap realToFrac . concat $ fmap DF.toList . DF.toList -- convert to GLfloat
          --               FOV    Aspect      Near   Far
          $ LP.perspective (pi/2) (resX/resY) (0.01) 1.0 :: [GLfloat]

    persp             <- GL.newMatrix RowMajor proj :: IO (GLmatrix GLfloat)
    location3         <- get (uniformLocation program "persp")
    uniform location3 $= persp

    let cam =
          fmap realToFrac . concat $ fmap DF.toList . DF.toList $ u_cam'
    camera            <- GL.newMatrix RowMajor cam :: IO (GLmatrix GLfloat)
    location4         <- get (uniformLocation program "camera")
    uniform location4 $= camera

    let testM44 = (V4 (V4 1 0 0 0) (V4 0 2 0 0) (V4 0 0 1 0) (V4 0 0 0 1)) :: M44 Double
    let mtx =
          --fmap realToFrac . concat $ fmap DF.toList . DF.toList $ (DT.trace ("u_xform' :" ++ show u_xform') $ u_xform')
          fmap realToFrac . concat $ fmap DF.toList . DF.toList $ u_xform'
          --(identity::M44 Double) :: [GLfloat]
    transform         <- GL.newMatrix RowMajor mtx :: IO (GLmatrix GLfloat)
    location5         <- get (uniformLocation program "transform")
    uniform location5 $= transform --u_xform'

    location6 <- get (uniformLocation program "tex_00")
    uniform location6 $= (TextureUnit 0)
    location7 <- get (uniformLocation program "tex_01")
    uniform location7 $= (TextureUnit 1)

    -- activeTexture            $= TextureUnit 2
    -- texture Texture2D        $= Enabled    
    -- textureBinding Texture2D $= Just (unsafeCoerce tx :: TextureObject)
    -- location8 <- get (uniformLocation program "tex_02")
    -- uniform location8 $= (TextureUnit 2)
    
    print "Finished loading textures."

    
    -- | Unload buffers
    --bindVertexArrayObject         $= Nothing
    --bindBuffer ElementArrayBuffer $= Nothing

    return ()

-- toTextureObject :: Texture -> TextureObject
-- toTextureObject x = unsafeCoere x

       -- | Indices -> Stride -> ListOfFloats -> Material -> Descriptor
initVAO :: ([Int], Int, [Float], Material) -> IO Descriptor
initVAO (idx', st', vs', matPath) =
  do
    let
      idx = (fmap unsafeCoerce idx') :: [GLuint]
      vs  = (fmap unsafeCoerce vs')  :: [GLfloat]
    --_ <- DT.trace ("Rendering.initVAO.vs :" ++ show vs) $ return ()
    -- | VAO
    vao <- genObjectName
    bindVertexArrayObject $= Just vao 
    -- | VBO
    vertexBuffer <- genObjectName
    bindBuffer ArrayBuffer $= Just vertexBuffer
    withArray vs $ \ptr ->
      do
        let sizev = fromIntegral ((length vs) * sizeOf (head vs))
        bufferData ArrayBuffer $= (sizev, ptr, StaticDraw)
    -- | EBO
    elementBuffer <- genObjectName
    bindBuffer ElementArrayBuffer $= Just elementBuffer
    let numIndices = length (idx)
    withArray (idx) $ \ptr ->
      do
        let indicesSize = fromIntegral (numIndices * sizeOf (head (idx)))
        bufferData ElementArrayBuffer $= (indicesSize, ptr, StaticDraw)
        
        -- | Bind the pointer to the vertex attribute data
        let floatSize  = (fromIntegral $ sizeOf (0.0::GLfloat)) :: GLsizei
            stride     = (fromIntegral st') * floatSize
        
        -- | Alpha
        vertexAttribPointer (AttribLocation 0) $= (ToFloat, VertexArrayDescriptor 1 Float stride ((plusPtr nullPtr . fromIntegral) (0 * floatSize)))
        vertexAttribArray   (AttribLocation 0) $= Enabled
        -- | Colors
        vertexAttribPointer (AttribLocation 1) $= (ToFloat, VertexArrayDescriptor 3 Float stride ((plusPtr nullPtr . fromIntegral) (1 * floatSize)))
        vertexAttribArray   (AttribLocation 1) $= Enabled
        -- | Normals
        vertexAttribPointer (AttribLocation 2) $= (ToFloat, VertexArrayDescriptor 3 Float stride ((plusPtr nullPtr . fromIntegral) (4 * floatSize)))
        vertexAttribArray   (AttribLocation 2) $= Enabled
        -- | UVW
        vertexAttribPointer (AttribLocation 3) $= (ToFloat, VertexArrayDescriptor 3 Float stride ((plusPtr nullPtr . fromIntegral) (7 * floatSize)))
        vertexAttribArray   (AttribLocation 3) $= Enabled
        -- | Positions
        vertexAttribPointer (AttribLocation 4) $= (ToFloat, VertexArrayDescriptor 3 Float stride ((plusPtr nullPtr . fromIntegral) (10 * floatSize)))
        vertexAttribArray   (AttribLocation 4) $= Enabled

    return $ Descriptor vao (fromIntegral numIndices)

--f = "textures/8192_moon.jpg"

loadTex :: FilePath -> IO TextureObject
loadTex f =
  do
    t <- either error id <$> readTexture f
    texture2DWrap $= (Repeated, ClampToEdge)
    --textureFilter Texture2D $= ((Linear', Nothing), Linear')
    textureFilter  Texture2D $= ((Linear', Just Nearest), Linear')
    blend $= Enabled
    blendFunc $= (SrcAlpha, OneMinusSrcAlpha)
    generateMipmap' Texture2D
    return t
